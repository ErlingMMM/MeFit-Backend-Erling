// <auto-generated />
using System;
using MeFit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MeFit.Migrations
{
    [DbContext(typeof(MeFitDdContext))]
    [Migration("20231117120217_initialDb")]
    partial class initialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("MeFit.Data.Models.Exercise", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Difficulty")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Exercise");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f21bf2b6-b150-4cee-be90-f59c81add994"),
                            Description = "Jumping jacks are a simple and effective cardiovascular exercise...",
                            Difficulty = 1,
                            Equipment = "Jump Rope",
                            Image = "https://example.com/bicyclecrunches.jpg",
                            MuscleGroup = "Legs, Arms, Cardio",
                            Name = "Jumping Jacks"
                        },
                        new
                        {
                            Id = new Guid("d3342565-af1d-4c64-b14c-432c5f2af5b9"),
                            Description = "Bicycle crunches are a great abdominal exercise that targets multiple muscle groups...",
                            Difficulty = 2,
                            Equipment = "Exercise Mat",
                            Image = "https://example.com/bicyclecrunches.jpg",
                            MuscleGroup = "Abdominals, Legs",
                            Name = "Bicycle Crunches"
                        });
                });

            modelBuilder.Entity("MeFit.Data.Models.ExerciseWorkout", b =>
                {
                    b.Property<Guid>("ExerciseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExerciseId", "WorkoutId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("ExerciseWorkouts");

                    b.HasData(
                        new
                        {
                            ExerciseId = new Guid("f21bf2b6-b150-4cee-be90-f59c81add994"),
                            WorkoutId = new Guid("1f4c1c49-ec08-4137-b591-cf58bc86c160")
                        },
                        new
                        {
                            ExerciseId = new Guid("d3342565-af1d-4c64-b14c-432c5f2af5b9"),
                            WorkoutId = new Guid("143798a3-f637-4764-a42f-f5b41088a2c2")
                        });
                });

            modelBuilder.Entity("MeFit.Data.Models.Plan", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Plan");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d23dadd6-2283-4931-9620-b170f926a6c9"),
                            Description = "A beginner workout plan for getting started.",
                            Difficulty = 1,
                            Image = "https://example.com/bicyclecrunches.jpg",
                            Name = "Beginner Plan"
                        },
                        new
                        {
                            Id = new Guid("7d989a46-edef-451f-bc05-2cd76adebd66"),
                            Description = "An intermediate workout plan for advancing your fitness.",
                            Difficulty = 2,
                            Image = "https://example.com/bicyclecrunches.jpg",
                            Name = "Intermediate Plan"
                        });
                });

            modelBuilder.Entity("MeFit.Data.Models.Workout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int");

                    b.Property<string>("Equipment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MuscleGroup")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Reps")
                        .HasColumnType("int");

                    b.Property<int>("Sets")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Workouts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1f4c1c49-ec08-4137-b591-cf58bc86c160"),
                            Description = "Full Body Circuit",
                            Difficulty = 2,
                            Equipment = "Jump Rope",
                            Image = "https://example.com/bicyclecrunches.jpg",
                            MuscleGroup = "Legs, Arms, Core",
                            Name = "Full Body Circuit Workout",
                            Reps = 10,
                            Sets = 3
                        },
                        new
                        {
                            Id = new Guid("143798a3-f637-4764-a42f-f5b41088a2c2"),
                            Description = "High-Intensity Interval Training (HIIT)",
                            Difficulty = 3,
                            Equipment = "Exercise Mat",
                            Image = "https://example.com/bicyclecrunches.jpg",
                            MuscleGroup = "Cardio, Legs, Arms",
                            Name = "HIIT Workout",
                            Reps = 12,
                            Sets = 4
                        });
                });

            modelBuilder.Entity("MeFit.Data.Models.WorkoutPlan", b =>
                {
                    b.Property<Guid>("PlanId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WorkoutId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PlanId", "WorkoutId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutPlan");

                    b.HasData(
                        new
                        {
                            PlanId = new Guid("d23dadd6-2283-4931-9620-b170f926a6c9"),
                            WorkoutId = new Guid("1f4c1c49-ec08-4137-b591-cf58bc86c160")
                        },
                        new
                        {
                            PlanId = new Guid("7d989a46-edef-451f-bc05-2cd76adebd66"),
                            WorkoutId = new Guid("143798a3-f637-4764-a42f-f5b41088a2c2")
                        });
                });

            modelBuilder.Entity("MeFit.Data.Models.ExerciseWorkout", b =>
                {
                    b.HasOne("MeFit.Data.Models.Exercise", "Exercise")
                        .WithMany("ExerciseWorkouts")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit.Data.Models.Workout", "Workout")
                        .WithMany("ExerciseWorkouts")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("MeFit.Data.Models.WorkoutPlan", b =>
                {
                    b.HasOne("MeFit.Data.Models.Plan", "Plan")
                        .WithMany("WorkoutPlans")
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MeFit.Data.Models.Workout", "Workout")
                        .WithMany("WorkoutPlans")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plan");

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("MeFit.Data.Models.Exercise", b =>
                {
                    b.Navigation("ExerciseWorkouts");
                });

            modelBuilder.Entity("MeFit.Data.Models.Plan", b =>
                {
                    b.Navigation("WorkoutPlans");
                });

            modelBuilder.Entity("MeFit.Data.Models.Workout", b =>
                {
                    b.Navigation("ExerciseWorkouts");

                    b.Navigation("WorkoutPlans");
                });
#pragma warning restore 612, 618
        }
    }
}
